name: Backend CI/CD Pipeline

# Die Pipeline wird bei jedem Commit ausgelöst
on:
  push:
    branches:
      - main # Ändere dies, wenn eine andere Branch überwacht werden soll

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Schritt 1: Repository klonen
      - name: Checkout Code
        uses: actions/checkout@v4

      # Schritt 2: Java-Umgebung einrichten
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Stelle sicher, dass die Java-Version mit deinem Projekt kompatibel ist
          distribution: 'temurin'

      # Schritt 3: Abhängigkeiten installieren
      - name: Install Dependencies
        run: mvn clean install -DskipTests

      # Schritt 4: Code Linting
      - name: Lint Code
        run: mvn checkstyle:check || echo "Linting Fehler gefunden" # Checkstyle für Linting

      # Schritt 5: Tests ausführen
      - name: Run Unit and Integration Tests
        run: mvn test

      # Schritt 6: Testabdeckung überprüfen
      - name: Check Test Coverage
        run: |
          mvn jacoco:report
          echo "Testabdeckung wird überprüft..."

      # Schritt 7: Testergebnisse hochladen
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      # Schritt 1: Repository klonen
      - name: Checkout Code
        uses: actions/checkout@v4

      # Schritt 2: Docker-Image erstellen
      - name: Build Docker Image
        run: |
          docker build -t backend-app:${{ github.sha }} .

      # Schritt 3: Docker-Image in Registry pushen
      - name: Push Docker Image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag backend-app:${{ github.sha }} yourdockerhub/backend-app:${{ github.sha }}
          docker push yourdockerhub/backend-app:${{ github.sha }}

      # Schritt 4: Deployment auf Staging-Server
      - name: Deploy to Staging Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_SERVER_USER }}@${{ secrets.STAGING_SERVER }} "
          docker pull yourdockerhub/backend-app:${{ github.sha }} &&
          docker run -d -p 8080:8080 yourdockerhub/backend-app:${{ github.sha }}"
